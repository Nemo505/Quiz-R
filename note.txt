create react
    create react-app or vite (npx create vite@latest)
    npm install
    npm run dev

tailwind
    npm install -D tailwindcss postcss autoprefixer
    npx tailwindcss init -p

How to use ref
    const option1 = useRef(null);
    const option2 = useRef(null);
    const option3 = useRef(null);

    // Putting refs into an array
    const optionArray = [option1, option2, option3];

    // Accessing the refs and modifying them
    const handleClick = (index) => {
        // Accessing the DOM node associated with a specific ref
        const selectedOption = optionArray[index].current;

        // Do something with the DOM node, for example, focus on it
        if (selectedOption) {
        selectedOption.focus();
        }
    };

    return (
        <div>
        {/* Example usage: */}
        <h1 ref={option1}>Option 1</h1>
        <h1 ref={option2}>Option 2</h1>
        <h1 ref={option3}>Option 3</h1>

        {/* Triggering handleClick for the first option */}
        <button onClick={() => handleClick(0)}>Focus on Option 1</button>
        </div>
    );

Api 
    https://opentdb.com/api_config.php
    https://opentdb.com/api.php?amount=10&category=18&difficulty=medium&type=multiple

API call in the following ways:
    XMLHttpRequest
    Fetch API
    Axios

Quiz
    index State (0, 1, 2,)
    question State (to add the data)
        fetch api inside useEffect
        if question data exist,
            if index > question.length
    option State for shuffleOptions
        Fisher-Yates Shuffle Algorithm

    lock, setLock = useState(false) //not to click again

    const checkAns = (e, ans) 
    if lock == false 
        if question.ans == ans,
        e.target.classList.add("correct")
        setLock(true);

        if question.ans  !== ans
            e.target.classList.add("wrong")
            option_array[question.ans-1].current.classList.add("correct")

    question.option1 onclick = { (e) => {checkAns(e, 1)}}
    ref={Option1}

    option1 = useRef(null);
    2,3....
    option_array = [option1, ____,]

knowledge
    setIndex(prevIndex => prevIndex + 1);
    // should not modify the state variable directly like (++index).
    Instead, use the functional update form with the callback function provided to setIndex


